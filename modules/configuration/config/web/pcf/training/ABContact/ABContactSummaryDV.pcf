<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <DetailViewPanel
    editable="true"
    id="ABContactSummaryDV">
    <Require
      name="anABContact"
      type="ABContact"/>
    <InputColumn>
      <Label
        label="&quot;Datos Basicos&quot;"/>
      <TextInput
        id="Name"
        label="DisplayKey.get(&quot;Training.Name&quot;)"
        value="anABContact.DisplayName"/>
      <TextInput
        id="ContactID"
        label="DisplayKey.get(&quot;Training.PublicID&quot;)"
        value="anABContact.PublicID"/>
      <TextInput
        id="Age"
        label="DisplayKey.get(&quot;Training.Age&quot;)"
        value="anABContact.Age as String"
        visible="(anABContact typeis ABPerson)"/>
      <TextInput
        id="CreditScore"
        label="&quot;Factor de Credito&quot;"
        value="getCreditScore()"/>
      <DateInput
        id="CreateTime"
        label="DisplayKey.get(&quot;Training.CreatedOn&quot;)"
        value="anABContact.CreateTime"/>
      <TextInput
        id="Rut"
        label="DisplayKey.get(&quot;Training.Rut&quot;)"
        value="anABContact.Rut_Ext"
        visible="true"/>
      <InputDivider/>
      <TextInput
        editable="CurrentLocation.isInEditMode()"
        id="Direccion"
        label="DisplayKey.get(&quot;Training.Address&quot;)"
        value="anABContact.PrimaryAddress.AddressLine1"
        visible="true"/>
      <TypeKeyInput
        editable="CurrentLocation.isInEditMode()"
        id="Regiones"
        label="DisplayKey.get(&quot;Training.Region&quot;)"
        value="anABContact.Region"
        valueType="typekey.Regiones_Ext"/>
      <TextInput
        editable="CurrentLocation.isInEditMode()"
        id="CodigoPostal"
        label="DisplayKey.get(&quot;Training.PostalCode&quot;)"
        value="anABContact.CodigoPostal_Ext"
        visible="true"/>
    </InputColumn>
    <Code><![CDATA[uses gw.api.util.DisplayableException

uses bootcamp.creditscorecalculator.creditScoreCalc
uses gw.transaction.Transaction

function getCreditScore():String{
  if (anABContact.CreditScore != null){
    return anABContact.CreditScore as String
  }
  else {
    Transaction.runWithNewBundle(\ elt -> {
      anABContact.CreditScore = creditScoreCalc.getCreditScore(anABContact.Rut_Ext)
      elt.add(anABContact)
    })
    return anABContact.CreditScore as String
  }
}

/* This function is used to populate the Employer dynamic dropdown.
*/
function queryForContactManagers () : gw.api.database.IQueryBeanResult<entity.User> {

  // Query for all roles with the name "Contact Manager". (There is only one.)                
  var roleQuery = gw.api.database.Query.make(Role)
  roleQuery.compare("Name", Equals, "Contact Manager")
  
  // Query for all instances of UserRole that point to the "Contact Manager" role
  // from the previous query.
  var userRoleQuery = gw.api.database.Query.make(UserRole)
  userRoleQuery.subselect("Role", CompareIn, roleQuery, "ID")
  
  // Query for all users which are referenced by the UserRole instances from
  // the query above. (That is, the UserRole instances that also point to
  // "Contact Manager".
  var userQuery = gw.api.database.Query.make(User)
  userQuery.subselect("ID", CompareIn, userRoleQuery, "User")                  
  
  // Execute the query and return the results.     
  var resultSet = userQuery.select()
  return resultSet
  
}


]]></Code>
  </DetailViewPanel>
</PCF>